<classMaker classVarName="fragment" modifier="abstract">
    <extends classVarName="baseFragment"/>
    <implements classVarName="presenterGetInterface"/>

    <note>${note}</note>

    <property valueName="presenter"
              classVarName="presenter"
             >
        <anno classVarName="inject"/>
    </property>
    <property valueName="presenter1"
              classVarName="presenter"
              modifier="public">
    </property>
    <property valueName="presenter2"
              classVarName="presenter"
              modifier="protected">
        </property>

    <property valueName="presenter3"
              classVarName="presenter"
              modifier="private">
    </property>
    <property valueName="presenter4"
              classVarName="presenter"
              modifier="private#volatile">
    </property>
    <property valueName="CONSTANT"
                classVarName="string"
              modifier="public#static#final">
        <body>
            "constan_value"
        </body>
    </property>

    <property valueName="atomicInteger"
                classVarName="atomicInteger"
              modifier="private">
        <body>
            new AtomicInteger(1)
        </body>
    </property>

    <method returnClassName="void" methodName="onCreateView" modifier="public">
        <anno classVarName="override"/>

        <methodParam classVarName="bundle" valueName="savedInstanceState"/>

        <include classVarName="R"/>
        <body>
            setContentView(R.layout.${_-name}_fragment);\n
            super.onCreate(savedInstanceState);\n

        </body>
    </method>

    <method returnClassName="void" methodName="inject" modifier="public">
        <anno classVarName="override"/>

        <methodParam classVarName="appComponent" valueName="appComponent"/>

        <include classVarName="dagger"/>
        <include classVarName="module"/>
        <include classVarName="component"/>
        <body>
            ${name}Component homeComponent = Dagger${name}Component.builder()\n
            .appComponent(appComponent)\n
            .${&lt;name}Module(new ${name}Module(this))\n
            .build();\n
            homeComponent.inject${type}(this);\n
            homeComponent.injectPresenter(presenter);
        </body>
    </method>
    <method returnClassName="intent" methodName="createIntent" modifier="private#static">

        <methodParam classVarName="context" valueName="context"/>
        <body>
            return new Intent(context,  ${name}Activity.class);
        </body>
    </method>
    <method returnClassName="intent" methodName="createIntent1" modifier="static">

        <methodParam classVarName="context" valueName="context"/>
        <body>
            return new Intent(context,  ${name}Activity.class);
        </body>
    </method>
    <method returnClassName="intent" methodName="createIntent2" modifier="abstract">
    </method>

    <method returnClassName="intent" methodName="createIntent3" modifier="private#static#final#synchronized">
        <methodParam classVarName="context" valueName="context"/>
        <body>
            return new Intent(context,  ${name}Activity.class);
        </body>
    </method>
</classMaker>